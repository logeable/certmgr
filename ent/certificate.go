// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/logeable/certmgr/ent/certificate"
	"github.com/logeable/certmgr/ent/namespace"
)

// Certificate is the model entity for the Certificate schema.
type Certificate struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// CertPem holds the value of the "cert_pem" field.
	CertPem string `json:"cert_pem,omitempty"`
	// KeyPem holds the value of the "key_pem" field.
	KeyPem string `json:"key_pem,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificateQuery when eager-loading is set.
	Edges        CertificateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CertificateEdges holds the relations/edges for other nodes in the graph.
type CertificateEdges struct {
	// NamespaceRef holds the value of the namespace_ref edge.
	NamespaceRef *Namespace `json:"namespace_ref,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NamespaceRefOrErr returns the NamespaceRef value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificateEdges) NamespaceRefOrErr() (*Namespace, error) {
	if e.NamespaceRef != nil {
		return e.NamespaceRef, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: namespace.Label}
	}
	return nil, &NotLoadedError{edge: "namespace_ref"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certificate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case certificate.FieldID, certificate.FieldNamespace, certificate.FieldType, certificate.FieldCertPem, certificate.FieldKeyPem:
			values[i] = new(sql.NullString)
		case certificate.FieldUpdatedAt, certificate.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certificate fields.
func (c *Certificate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certificate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case certificate.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				c.Namespace = value.String
			}
		case certificate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case certificate.FieldCertPem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cert_pem", values[i])
			} else if value.Valid {
				c.CertPem = value.String
			}
		case certificate.FieldKeyPem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_pem", values[i])
			} else if value.Valid {
				c.KeyPem = value.String
			}
		case certificate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case certificate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Certificate.
// This includes values selected through modifiers, order, etc.
func (c *Certificate) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryNamespaceRef queries the "namespace_ref" edge of the Certificate entity.
func (c *Certificate) QueryNamespaceRef() *NamespaceQuery {
	return NewCertificateClient(c.config).QueryNamespaceRef(c)
}

// Update returns a builder for updating this Certificate.
// Note that you need to call Certificate.Unwrap() before calling this method if this Certificate
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certificate) Update() *CertificateUpdateOne {
	return NewCertificateClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Certificate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certificate) Unwrap() *Certificate {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certificate is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certificate) String() string {
	var builder strings.Builder
	builder.WriteString("Certificate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("namespace=")
	builder.WriteString(c.Namespace)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("cert_pem=")
	builder.WriteString(c.CertPem)
	builder.WriteString(", ")
	builder.WriteString("key_pem=")
	builder.WriteString(c.KeyPem)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Certificates is a parsable slice of Certificate.
type Certificates []*Certificate
