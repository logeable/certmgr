// Code generated by ent, DO NOT EDIT.

package certificate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the certificate type in the database.
	Label = "certificate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNamespace holds the string denoting the namespace field in the database.
	FieldNamespace = "namespace"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCertPem holds the string denoting the cert_pem field in the database.
	FieldCertPem = "cert_pem"
	// FieldKeyPem holds the string denoting the key_pem field in the database.
	FieldKeyPem = "key_pem"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeNamespaceRef holds the string denoting the namespace_ref edge name in mutations.
	EdgeNamespaceRef = "namespace_ref"
	// Table holds the table name of the certificate in the database.
	Table = "certificates"
	// NamespaceRefTable is the table that holds the namespace_ref relation/edge.
	NamespaceRefTable = "certificates"
	// NamespaceRefInverseTable is the table name for the Namespace entity.
	// It exists in this package in order to avoid circular dependency with the "namespace" package.
	NamespaceRefInverseTable = "namespaces"
	// NamespaceRefColumn is the table column denoting the namespace_ref relation/edge.
	NamespaceRefColumn = "namespace"
)

// Columns holds all SQL columns for certificate fields.
var Columns = []string{
	FieldID,
	FieldNamespace,
	FieldType,
	FieldCertPem,
	FieldKeyPem,
	FieldUpdatedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Certificate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNamespace orders the results by the namespace field.
func ByNamespace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespace, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCertPem orders the results by the cert_pem field.
func ByCertPem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertPem, opts...).ToFunc()
}

// ByKeyPem orders the results by the key_pem field.
func ByKeyPem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyPem, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByNamespaceRefField orders the results by namespace_ref field.
func ByNamespaceRefField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNamespaceRefStep(), sql.OrderByField(field, opts...))
	}
}
func newNamespaceRefStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NamespaceRefInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NamespaceRefTable, NamespaceRefColumn),
	)
}
