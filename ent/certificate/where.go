// Code generated by ent, DO NOT EDIT.

package certificate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/logeable/certmgr/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldID, id))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v int) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldNamespace, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldType, v))
}

// CertPem applies equality check predicate on the "cert_pem" field. It's identical to CertPemEQ.
func CertPem(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCertPem, v))
}

// KeyPem applies equality check predicate on the "key_pem" field. It's identical to KeyPemEQ.
func KeyPem(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldKeyPem, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCreatedAt, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v int) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v int) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...int) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...int) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldNamespace, vs...))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldType, v))
}

// CertPemEQ applies the EQ predicate on the "cert_pem" field.
func CertPemEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCertPem, v))
}

// CertPemNEQ applies the NEQ predicate on the "cert_pem" field.
func CertPemNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCertPem, v))
}

// CertPemIn applies the In predicate on the "cert_pem" field.
func CertPemIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCertPem, vs...))
}

// CertPemNotIn applies the NotIn predicate on the "cert_pem" field.
func CertPemNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCertPem, vs...))
}

// CertPemGT applies the GT predicate on the "cert_pem" field.
func CertPemGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCertPem, v))
}

// CertPemGTE applies the GTE predicate on the "cert_pem" field.
func CertPemGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCertPem, v))
}

// CertPemLT applies the LT predicate on the "cert_pem" field.
func CertPemLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCertPem, v))
}

// CertPemLTE applies the LTE predicate on the "cert_pem" field.
func CertPemLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCertPem, v))
}

// CertPemContains applies the Contains predicate on the "cert_pem" field.
func CertPemContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldCertPem, v))
}

// CertPemHasPrefix applies the HasPrefix predicate on the "cert_pem" field.
func CertPemHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldCertPem, v))
}

// CertPemHasSuffix applies the HasSuffix predicate on the "cert_pem" field.
func CertPemHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldCertPem, v))
}

// CertPemEqualFold applies the EqualFold predicate on the "cert_pem" field.
func CertPemEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldCertPem, v))
}

// CertPemContainsFold applies the ContainsFold predicate on the "cert_pem" field.
func CertPemContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldCertPem, v))
}

// KeyPemEQ applies the EQ predicate on the "key_pem" field.
func KeyPemEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldKeyPem, v))
}

// KeyPemNEQ applies the NEQ predicate on the "key_pem" field.
func KeyPemNEQ(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldKeyPem, v))
}

// KeyPemIn applies the In predicate on the "key_pem" field.
func KeyPemIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldKeyPem, vs...))
}

// KeyPemNotIn applies the NotIn predicate on the "key_pem" field.
func KeyPemNotIn(vs ...string) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldKeyPem, vs...))
}

// KeyPemGT applies the GT predicate on the "key_pem" field.
func KeyPemGT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldKeyPem, v))
}

// KeyPemGTE applies the GTE predicate on the "key_pem" field.
func KeyPemGTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldKeyPem, v))
}

// KeyPemLT applies the LT predicate on the "key_pem" field.
func KeyPemLT(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldKeyPem, v))
}

// KeyPemLTE applies the LTE predicate on the "key_pem" field.
func KeyPemLTE(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldKeyPem, v))
}

// KeyPemContains applies the Contains predicate on the "key_pem" field.
func KeyPemContains(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContains(FieldKeyPem, v))
}

// KeyPemHasPrefix applies the HasPrefix predicate on the "key_pem" field.
func KeyPemHasPrefix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasPrefix(FieldKeyPem, v))
}

// KeyPemHasSuffix applies the HasSuffix predicate on the "key_pem" field.
func KeyPemHasSuffix(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldHasSuffix(FieldKeyPem, v))
}

// KeyPemIsNil applies the IsNil predicate on the "key_pem" field.
func KeyPemIsNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldIsNull(FieldKeyPem))
}

// KeyPemNotNil applies the NotNil predicate on the "key_pem" field.
func KeyPemNotNil() predicate.Certificate {
	return predicate.Certificate(sql.FieldNotNull(FieldKeyPem))
}

// KeyPemEqualFold applies the EqualFold predicate on the "key_pem" field.
func KeyPemEqualFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldEqualFold(FieldKeyPem, v))
}

// KeyPemContainsFold applies the ContainsFold predicate on the "key_pem" field.
func KeyPemContainsFold(v string) predicate.Certificate {
	return predicate.Certificate(sql.FieldContainsFold(FieldKeyPem, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Certificate {
	return predicate.Certificate(sql.FieldLTE(FieldCreatedAt, v))
}

// HasNamespaceRef applies the HasEdge predicate on the "namespace_ref" edge.
func HasNamespaceRef() predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceRefTable, NamespaceRefColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNamespaceRefWith applies the HasEdge predicate on the "namespace_ref" edge with a given conditions (other predicates).
func HasNamespaceRefWith(preds ...predicate.Namespace) predicate.Certificate {
	return predicate.Certificate(func(s *sql.Selector) {
		step := newNamespaceRefStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Certificate) predicate.Certificate {
	return predicate.Certificate(sql.NotPredicates(p))
}
