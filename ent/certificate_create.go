// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logeable/certmgr/ent/certificate"
	"github.com/logeable/certmgr/ent/namespace"
)

// CertificateCreate is the builder for creating a Certificate entity.
type CertificateCreate struct {
	config
	mutation *CertificateMutation
	hooks    []Hook
}

// SetNamespace sets the "namespace" field.
func (cc *CertificateCreate) SetNamespace(s string) *CertificateCreate {
	cc.mutation.SetNamespace(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CertificateCreate) SetType(s string) *CertificateCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetCertPem sets the "cert_pem" field.
func (cc *CertificateCreate) SetCertPem(s string) *CertificateCreate {
	cc.mutation.SetCertPem(s)
	return cc
}

// SetKeyPem sets the "key_pem" field.
func (cc *CertificateCreate) SetKeyPem(s string) *CertificateCreate {
	cc.mutation.SetKeyPem(s)
	return cc
}

// SetNillableKeyPem sets the "key_pem" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableKeyPem(s *string) *CertificateCreate {
	if s != nil {
		cc.SetKeyPem(*s)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CertificateCreate) SetUpdatedAt(t time.Time) *CertificateCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableUpdatedAt(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CertificateCreate) SetCreatedAt(t time.Time) *CertificateCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CertificateCreate) SetNillableCreatedAt(t *time.Time) *CertificateCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CertificateCreate) SetID(s string) *CertificateCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNamespaceRefID sets the "namespace_ref" edge to the Namespace entity by ID.
func (cc *CertificateCreate) SetNamespaceRefID(id string) *CertificateCreate {
	cc.mutation.SetNamespaceRefID(id)
	return cc
}

// SetNamespaceRef sets the "namespace_ref" edge to the Namespace entity.
func (cc *CertificateCreate) SetNamespaceRef(n *Namespace) *CertificateCreate {
	return cc.SetNamespaceRefID(n.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cc *CertificateCreate) Mutation() *CertificateMutation {
	return cc.mutation
}

// Save creates the Certificate in the database.
func (cc *CertificateCreate) Save(ctx context.Context) (*Certificate, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificateCreate) SaveX(ctx context.Context) *Certificate {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificateCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificateCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CertificateCreate) defaults() {
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := certificate.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := certificate.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificateCreate) check() error {
	if _, ok := cc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`ent: missing required field "Certificate.namespace"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Certificate.type"`)}
	}
	if _, ok := cc.mutation.CertPem(); !ok {
		return &ValidationError{Name: "cert_pem", err: errors.New(`ent: missing required field "Certificate.cert_pem"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Certificate.updated_at"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Certificate.created_at"`)}
	}
	if len(cc.mutation.NamespaceRefIDs()) == 0 {
		return &ValidationError{Name: "namespace_ref", err: errors.New(`ent: missing required edge "Certificate.namespace_ref"`)}
	}
	return nil
}

func (cc *CertificateCreate) sqlSave(ctx context.Context) (*Certificate, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Certificate.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CertificateCreate) createSpec() (*Certificate, *sqlgraph.CreateSpec) {
	var (
		_node = &Certificate{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(certificate.Table, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(certificate.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.CertPem(); ok {
		_spec.SetField(certificate.FieldCertPem, field.TypeString, value)
		_node.CertPem = value
	}
	if value, ok := cc.mutation.KeyPem(); ok {
		_spec.SetField(certificate.FieldKeyPem, field.TypeString, value)
		_node.KeyPem = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(certificate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(certificate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cc.mutation.NamespaceRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.NamespaceRefTable,
			Columns: []string{certificate.NamespaceRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Namespace = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificateCreateBulk is the builder for creating many Certificate entities in bulk.
type CertificateCreateBulk struct {
	config
	err      error
	builders []*CertificateCreate
}

// Save creates the Certificate entities in the database.
func (ccb *CertificateCreateBulk) Save(ctx context.Context) ([]*Certificate, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certificate, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificateCreateBulk) SaveX(ctx context.Context) []*Certificate {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificateCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificateCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
