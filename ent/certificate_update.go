// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/logeable/certmgr/ent/certificate"
	"github.com/logeable/certmgr/ent/namespace"
	"github.com/logeable/certmgr/ent/predicate"
)

// CertificateUpdate is the builder for updating Certificate entities.
type CertificateUpdate struct {
	config
	hooks    []Hook
	mutation *CertificateMutation
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cu *CertificateUpdate) Where(ps ...predicate.Certificate) *CertificateUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetNamespace sets the "namespace" field.
func (cu *CertificateUpdate) SetNamespace(s string) *CertificateUpdate {
	cu.mutation.SetNamespace(s)
	return cu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableNamespace(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetNamespace(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CertificateUpdate) SetType(s string) *CertificateUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableType(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetCertPem sets the "cert_pem" field.
func (cu *CertificateUpdate) SetCertPem(s string) *CertificateUpdate {
	cu.mutation.SetCertPem(s)
	return cu
}

// SetNillableCertPem sets the "cert_pem" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableCertPem(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetCertPem(*s)
	}
	return cu
}

// SetKeyPem sets the "key_pem" field.
func (cu *CertificateUpdate) SetKeyPem(s string) *CertificateUpdate {
	cu.mutation.SetKeyPem(s)
	return cu
}

// SetNillableKeyPem sets the "key_pem" field if the given value is not nil.
func (cu *CertificateUpdate) SetNillableKeyPem(s *string) *CertificateUpdate {
	if s != nil {
		cu.SetKeyPem(*s)
	}
	return cu
}

// ClearKeyPem clears the value of the "key_pem" field.
func (cu *CertificateUpdate) ClearKeyPem() *CertificateUpdate {
	cu.mutation.ClearKeyPem()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CertificateUpdate) SetUpdatedAt(t time.Time) *CertificateUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNamespaceRefID sets the "namespace_ref" edge to the Namespace entity by ID.
func (cu *CertificateUpdate) SetNamespaceRefID(id string) *CertificateUpdate {
	cu.mutation.SetNamespaceRefID(id)
	return cu
}

// SetNamespaceRef sets the "namespace_ref" edge to the Namespace entity.
func (cu *CertificateUpdate) SetNamespaceRef(n *Namespace) *CertificateUpdate {
	return cu.SetNamespaceRefID(n.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cu *CertificateUpdate) Mutation() *CertificateMutation {
	return cu.mutation
}

// ClearNamespaceRef clears the "namespace_ref" edge to the Namespace entity.
func (cu *CertificateUpdate) ClearNamespaceRef() *CertificateUpdate {
	cu.mutation.ClearNamespaceRef()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertificateUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertificateUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertificateUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertificateUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CertificateUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := certificate.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertificateUpdate) check() error {
	if cu.mutation.NamespaceRefCleared() && len(cu.mutation.NamespaceRefIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Certificate.namespace_ref"`)
	}
	return nil
}

func (cu *CertificateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(certificate.Table, certificate.Columns, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(certificate.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.CertPem(); ok {
		_spec.SetField(certificate.FieldCertPem, field.TypeString, value)
	}
	if value, ok := cu.mutation.KeyPem(); ok {
		_spec.SetField(certificate.FieldKeyPem, field.TypeString, value)
	}
	if cu.mutation.KeyPemCleared() {
		_spec.ClearField(certificate.FieldKeyPem, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(certificate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.NamespaceRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.NamespaceRefTable,
			Columns: []string{certificate.NamespaceRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NamespaceRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.NamespaceRefTable,
			Columns: []string{certificate.NamespaceRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertificateUpdateOne is the builder for updating a single Certificate entity.
type CertificateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertificateMutation
}

// SetNamespace sets the "namespace" field.
func (cuo *CertificateUpdateOne) SetNamespace(s string) *CertificateUpdateOne {
	cuo.mutation.SetNamespace(s)
	return cuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableNamespace(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetNamespace(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CertificateUpdateOne) SetType(s string) *CertificateUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableType(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetCertPem sets the "cert_pem" field.
func (cuo *CertificateUpdateOne) SetCertPem(s string) *CertificateUpdateOne {
	cuo.mutation.SetCertPem(s)
	return cuo
}

// SetNillableCertPem sets the "cert_pem" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableCertPem(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetCertPem(*s)
	}
	return cuo
}

// SetKeyPem sets the "key_pem" field.
func (cuo *CertificateUpdateOne) SetKeyPem(s string) *CertificateUpdateOne {
	cuo.mutation.SetKeyPem(s)
	return cuo
}

// SetNillableKeyPem sets the "key_pem" field if the given value is not nil.
func (cuo *CertificateUpdateOne) SetNillableKeyPem(s *string) *CertificateUpdateOne {
	if s != nil {
		cuo.SetKeyPem(*s)
	}
	return cuo
}

// ClearKeyPem clears the value of the "key_pem" field.
func (cuo *CertificateUpdateOne) ClearKeyPem() *CertificateUpdateOne {
	cuo.mutation.ClearKeyPem()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CertificateUpdateOne) SetUpdatedAt(t time.Time) *CertificateUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNamespaceRefID sets the "namespace_ref" edge to the Namespace entity by ID.
func (cuo *CertificateUpdateOne) SetNamespaceRefID(id string) *CertificateUpdateOne {
	cuo.mutation.SetNamespaceRefID(id)
	return cuo
}

// SetNamespaceRef sets the "namespace_ref" edge to the Namespace entity.
func (cuo *CertificateUpdateOne) SetNamespaceRef(n *Namespace) *CertificateUpdateOne {
	return cuo.SetNamespaceRefID(n.ID)
}

// Mutation returns the CertificateMutation object of the builder.
func (cuo *CertificateUpdateOne) Mutation() *CertificateMutation {
	return cuo.mutation
}

// ClearNamespaceRef clears the "namespace_ref" edge to the Namespace entity.
func (cuo *CertificateUpdateOne) ClearNamespaceRef() *CertificateUpdateOne {
	cuo.mutation.ClearNamespaceRef()
	return cuo
}

// Where appends a list predicates to the CertificateUpdate builder.
func (cuo *CertificateUpdateOne) Where(ps ...predicate.Certificate) *CertificateUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertificateUpdateOne) Select(field string, fields ...string) *CertificateUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Certificate entity.
func (cuo *CertificateUpdateOne) Save(ctx context.Context) (*Certificate, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertificateUpdateOne) SaveX(ctx context.Context) *Certificate {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertificateUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertificateUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CertificateUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := certificate.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertificateUpdateOne) check() error {
	if cuo.mutation.NamespaceRefCleared() && len(cuo.mutation.NamespaceRefIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Certificate.namespace_ref"`)
	}
	return nil
}

func (cuo *CertificateUpdateOne) sqlSave(ctx context.Context) (_node *Certificate, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(certificate.Table, certificate.Columns, sqlgraph.NewFieldSpec(certificate.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Certificate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, certificate.FieldID)
		for _, f := range fields {
			if !certificate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != certificate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(certificate.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CertPem(); ok {
		_spec.SetField(certificate.FieldCertPem, field.TypeString, value)
	}
	if value, ok := cuo.mutation.KeyPem(); ok {
		_spec.SetField(certificate.FieldKeyPem, field.TypeString, value)
	}
	if cuo.mutation.KeyPemCleared() {
		_spec.ClearField(certificate.FieldKeyPem, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(certificate.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.NamespaceRefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.NamespaceRefTable,
			Columns: []string{certificate.NamespaceRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NamespaceRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certificate.NamespaceRefTable,
			Columns: []string{certificate.NamespaceRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Certificate{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{certificate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
